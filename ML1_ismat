k = 5

# Fit the kNN classifier
classifier = KNeighborsClassifier(n_neighbors=k, metric='euclidean')
classifier.fit(train_X, train_y)

# Make predictions on the grid points
grid_predictions = classifier.predict(grid_points)

# Create a colormap for the classes
colors = ListedColormap(['green', 'blue'])

# Plot the decision boundary
plt.figure(figsize=(8, 8))
plt.scatter(train_X.iloc[:, 0], train_X.iloc[:, 1], c=train_y, marker='o', cmap=colors, label='Training data')
plt.scatter(test_X.iloc[:, 0], test_X.iloc[:, 1], c=test_y, marker='+', cmap=colors, label='Test data')
plt.scatter(grid_points.iloc[:, 0], grid_points.iloc[:, 1], c=grid_predictions, marker='.', cmap=colors, label='Predictions')
plt.title(f'kNN classification with k = {k} (training error: {1-classifier.score(train_X, train_y):.2f}, test error: {1-classifier.score(test_X, test_y):.2f})')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.show()
